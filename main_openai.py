#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import os
import tempfile
import re
import matplotlib.pyplot as plt
import seaborn as sns

try:
    from langchain_experimental.agents import create_csv_agent
except ImportError:
    from langchain.agents import create_csv_agent

from langchain_openai import ChatOpenAI
from langchain.agents.agent_types import AgentType
from utils_openai import CsvValidator, extract_zip_file
import warnings
from dotenv import load_dotenv

load_dotenv()

import streamlit as st
import warnings
warnings.filterwarnings("ignore")

class CSVAnalysisAgent:
    def __init__(self, openai_api_key=None):
        """Inicializa o agente de an√°lise CSV com OpenAI GPT"""
        self.openai_api_key = openai_api_key
        self.agents = {}
        self.dataframes = {}
        self.file_info = {}
        
    def create_llm(self):
        """Cria uma inst√¢ncia do modelo OpenAI GPT"""
        if not self.openai_api_key:
            raise ValueError("OpenAI API Key √© necess√°ria para usar o agente")
        
        try:
            llm = ChatOpenAI(
                model="gpt-3.5-turbo",
                openai_api_key=self.openai_api_key,
                temperature=0.1
            )
            return llm
        except Exception as e:
            st.error(f"Erro ao criar modelo GPT: {str(e)}")
            return None

    def load_csv_data(self, file_path, file_type):
        """Carrega dados CSV e cria agente espec√≠fico"""
        try:
            # L√™ o arquivo CSV
            df = pd.read_csv(file_path, encoding='utf-8')
            
            # Armazena o dataframe
            self.dataframes[file_type] = df
            self.file_info[file_type] = {
                'path': file_path,
                'shape': df.shape,
                'columns': df.columns.tolist()
            }
            
            # Cria o LLM
            llm = self.create_llm()
            if llm is None:
                return False
            
            # Cria agente espec√≠fico para este CSV
            agent = create_csv_agent(
                llm,
                file_path,
                verbose=True,
                agent_type=AgentType.OPENAI_FUNCTIONS,
                allow_dangerous_code=True,
                handle_parsing_errors=True
            )
            
            self.agents[file_type] = agent
            return True
            
        except Exception as e:
            st.error(f"Erro ao carregar arquivo {file_type}: {str(e)}")
            return False

    def create_general_agent(self):
        """Cria um agente geral que pode acessar todos os dataframes"""
        try:
            if not self.dataframes:
                print("Erro: Nenhum dataframe carregado")
                return None
            
            llm = self.create_llm()
            if llm is None:
                print("Erro: N√£o foi poss√≠vel criar LLM")
                return None
            
            # Coleta TODOS os caminhos de arquivos v√°lidos usando file_info
            file_paths = []
            for file_type, info in self.file_info.items():
                if 'path' in info and os.path.exists(info['path']):
                    file_paths.append(info['path'])
            
            if not file_paths:
                print("Erro: Nenhum arquivo v√°lido encontrado")
                return None
            
            print(f"Criando agente geral com {len(file_paths)} arquivo(s): {file_paths}")
            
            # Cria agente geral com todos os arquivos
            general_agent = create_csv_agent(
                llm,
                file_paths,
                verbose=True,
                agent_type=AgentType.OPENAI_FUNCTIONS,
                allow_dangerous_code=True,
                handle_parsing_errors=True
            )
            
            return general_agent
            
        except Exception as e:
            print(f"Erro ao criar agente geral: {str(e)}")
            st.error(f"Erro ao criar agente geral: {str(e)}")
            return None

    def query(self, question, use_general_agent=True):
        """Executa uma consulta usando o agente apropriado"""
        try:
            if use_general_agent:
                agent = self.create_general_agent()
                if agent is None:
                    return "Erro: N√£o foi poss√≠vel criar o agente geral."
            else:
                # Usa o primeiro agente dispon√≠vel se n√£o usar o geral
                if not self.agents:
                    return "Erro: Nenhum agente dispon√≠vel."
                agent = list(self.agents.values())[0]
            
            # Adiciona contexto sobre os dados
            context = self._build_context()
            full_question = f"{context}\n\nPergunta: {question}"
            
            # Executa a consulta
            response = agent.run(full_question)
            return response
            
        except Exception as e:
            error_msg = f"Erro ao processar consulta: {str(e)}"
            print(error_msg)
            return error_msg
    
    def _build_context(self):
        """Constr√≥i contexto sobre os dados carregados"""
        context_parts = []
        context_parts.append("Voc√™ √© um assistente especializado em an√°lise de dados de arquivos csv, sejam notas fiscais ou n√£o.")
        context_parts.append("Responda sempre em portugu√™s brasileiro.")
        context_parts.append("Sempre que tiver que responder com um gr√°fico ou se fizer sentido responder com um gr√°fico, voc√™ deve sempre responder o c√≥digo Python para gerar o gr√°fico entre ``` (tr√™s crases no in√≠cio e no fim), que use matplotlib e o DataFrame 'df' j√° carregado para gerar o gr√°fico. Outras formata√ß√µes de c√≥digo n√£o s√£o permitidas. Coment√°rios ao longo do c√≥digo tamb√©m n√£o s√£o permitidos.")
        context_parts.append("Quando lhe perguntarem qual sua conclus√£o sobre a an√°lise de dados, voc√™ deve responder.")
        context_parts.append("Seja preciso e forne√ßa exemplos quando poss√≠vel.")
        context_parts.append("\nDados dispon√≠veis:")
        
        for file_type, info in self.file_info.items():
            context_parts.append(f"- {file_type.title()}: {info['shape'][0]} registros, {info['shape'][1]} colunas")
            context_parts.append(f"  Colunas: {', '.join(info['columns'][:5])}{'...' if len(info['columns']) > 5 else ''}")
        
        return "\n".join(context_parts)

def main():
    # Configura√ß√£o da p√°gina
    st.set_page_config(
        page_title="CSV Agent - An√°lise de CSVs (Desafio Extra Individual)",
        page_icon="ü§ñ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # T√≠tulo principal
    st.title("ü§ñ CSV Agent - An√°lise de CSVs (Desafio Extra Individual)")
    st.markdown("### üìä Powered by OpenAI GPT & LangChain")
    
    # Sidebar para configura√ß√µes
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
    
    # Verifica√ß√£o da API Key
    openai_api_key = os.getenv("OPENAI_API_KEY")
    
    if not openai_api_key:
        st.sidebar.error("üîë OpenAI API Key n√£o encontrada!")
        st.sidebar.markdown("""
        **Como configurar:**
        1. Obtenha sua API Key em: https://platform.openai.com/api-keys
        2. Crie um arquivo `.env` na raiz do projeto
        3. Adicione: `OPENAI_API_KEY=sua_api_key_aqui`
        """)
        st.stop()
    else:
        st.sidebar.success("üîë OpenAI API Key configurada!")
    
    # Inicializa√ß√£o do agente
    if 'agent' not in st.session_state:
        st.session_state.agent = CSVAnalysisAgent(openai_api_key)
    
    # Upload de arquivos
    st.sidebar.markdown("---")
    st.sidebar.header("üìÅ Upload de Arquivos")
    
    uploaded_files = st.sidebar.file_uploader(
        "Escolha arquivos CSV ou ZIP",
        type=['csv', 'zip'],
        accept_multiple_files=True,
        help="Fa√ßa upload de arquivos CSV de notas fiscais ou arquivos ZIP contendo CSVs"
    )
    
    # Processamento dos arquivos
    if uploaded_files:
        validator = CsvValidator()
        
        with st.spinner("üîÑ Processando arquivos..."):
            for uploaded_file in uploaded_files:
                # Salva arquivo tempor√°rio
                with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{uploaded_file.name}") as tmp_file:
                    tmp_file.write(uploaded_file.getvalue())
                    tmp_path = tmp_file.name
                
                try:
                    if uploaded_file.name.endswith('.zip'):
                        # Processa arquivo ZIP
                        temp_dir = extract_zip_file(uploaded_file)  # Passa o objeto uploaded_file, n√£o tmp_path
                        
                        if temp_dir:  # Verifica se a extra√ß√£o foi bem-sucedida
                            # Lista os arquivos CSV no diret√≥rio extra√≠do
                            csv_files = [f for f in os.listdir(temp_dir) if f.endswith('.csv')]
                            
                            for csv_file in csv_files:
                                csv_path = os.path.join(temp_dir, csv_file)
                                file_type = validator.identify_file_type(csv_path)
                                if file_type != 'unknown':
                                    success = st.session_state.agent.load_csv_data(csv_path, file_type)
                                    if success:
                                        st.sidebar.success(f"‚úÖ {file_type.title()} carregado!")
                                    else:
                                        st.sidebar.error(f"‚ùå Erro ao carregar {file_type}")
                        else:
                            st.sidebar.error("‚ùå Erro ao extrair arquivo ZIP")
                    
                    elif uploaded_file.name.endswith('.csv'):
                        # Processa arquivo CSV
                        file_type = validator.identify_file_type(tmp_path)
                        if file_type != 'unknown':
                            success = st.session_state.agent.load_csv_data(tmp_path, file_type)
                            if success:
                                st.sidebar.success(f"‚úÖ {file_type.title()} carregado!")
                            else:
                                st.sidebar.error(f"‚ùå Erro ao carregar {file_type}")
                        else:
                            st.sidebar.warning(f"‚ö†Ô∏è Tipo de arquivo n√£o identificado: {uploaded_file.name}")
                
                except Exception as e:
                    st.sidebar.error(f"‚ùå Erro ao processar {uploaded_file.name}: {str(e)}")

                finally:
                    # Limpa arquivo tempor√°rio
                    if os.path.exists(tmp_path):
                        os.unlink(tmp_path)
    
    # Exibi√ß√£o dos dados carregados
    if st.session_state.agent.dataframes:
        st.markdown("---")
        st.header("üìä Dados Carregados")
        
        # Tabs para diferentes tipos de dados
        tabs = st.tabs([f"{file_type.title()} ({info['shape'][0]} registros)" 
                       for file_type, info in st.session_state.agent.file_info.items()])
        
        for i, (file_type, df) in enumerate(st.session_state.agent.dataframes.items()):
            with tabs[i]:
                st.dataframe(df.head(10), use_container_width=True)
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Registros", df.shape[0])
                with col2:
                    st.metric("Colunas", df.shape[1])
                with col3:
                    if 'valor_total' in df.columns:
                        total_value = df['valor_total'].sum() if pd.api.types.is_numeric_dtype(df['valor_total']) else 0
                        st.metric("Valor Total", f"R$ {total_value:,.2f}")
    
    # Interface de consulta
    st.markdown("---")
    st.header("üí¨ Fa√ßa sua Pergunta")
    
    if st.session_state.agent.dataframes:
        # Exemplos de perguntas
        st.markdown("**üí° Exemplos de perguntas:**")
        examples = [
            "Quais s√£o os tipos de dados (num√©ricos, categ√≥ricos)?",
            "Existem padr√µes ou tend√™ncias temporais?",
            "Existem valores at√≠picos nos dados?",
            "Como as vari√°veis est√£o relacionadas umas com as outras? (Gr√°ficos de dispers√£o, tabelas cruzadas)",
            "Qual a distribui√ß√£o de cada vari√°vel (histogramas, distribui√ß√µes)?"
        ]
        
        cols = st.columns(len(examples))
        for i, example in enumerate(examples):
            if cols[i].button(example, key=f"example_{i}"):
                st.session_state.user_question = example
        
        # Campo de entrada
        user_question = st.text_area(
            "Digite sua pergunta sobre os dados:",
            value=st.session_state.get('user_question', ''),
            height=100,
            placeholder="Ex: Quais s√£o os tipos de dados (num√©ricos, categ√≥ricos)?"
        )
        
        # Bot√£o de consulta
        if st.button("üîç Analisar", type="primary"):
            if user_question.strip():
                with st.spinner("ü§ñ Analisando dados com GPT..."):
                    try:
                        resp = st.session_state.agent.query(user_question)
                        response = resp.split("```")[0] #fazer um for q vai checar se existem outros blocos de c√≥digo na lista
                        # Limpa e exibe a resposta
                        if response and str(response).strip():
                            # Remove poss√≠veis prefixos de debug
                            clean_response = str(response).strip()
 
                            # Remove linhas que come√ßam com "Tipo da resposta" ou similar
                            lines = clean_response.split('\n')
                            clean_lines = []
                            for line in lines:
                                if not any(debug_prefix in line.lower() for debug_prefix in 
                                         ['tipo da resposta', 'conte√∫do da resposta', 'debug:', '===']):
                                    clean_lines.append(line)
                            
                            final_response = '\n'.join(clean_lines).strip()
                             # Exibe a resposta final
                            st.markdown(final_response)

                            if "```" in resp:
                                code_blocks = re.findall(r"```(?:python)?\s*([\s\S]*?)```", resp)
                                if code_blocks:
                                    code = code_blocks[0]
                                    st.markdown("### Gr√°fico gerado")
                                    try:
                                        # executa o c√≥digo num namespace que j√° tem 'df', 'plt' e 'st'
                                        exec_globals = {"df": st.session_state.agent.dataframes['csv'], "plt": plt}
                                        exec(code, exec_globals)
                                        st.pyplot(plt.gcf())
                                        plt.clf()
                                    except Exception as e:
                                        st.error(f"Erro ao montar gr√°fico a partir do c√≥digo informado: {e}")
                        else:
                            st.error("N√£o foi poss√≠vel obter uma resposta v√°lida.")
                    except Exception as e:
                        st.error(f"Erro ao processar pergunta: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è Por favor, digite uma pergunta.")
    else:
        st.info("üìÅ Fa√ßa upload de arquivos CSV ou ZIP para come√ßar a an√°lise.")
    
    # Informa√ß√µes adicionais
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üìö Sobre")
    st.sidebar.markdown("""
    Esta aplica√ß√£o utiliza:
    - **OpenAI GPT** para processamento de linguagem natural
    - **LangChain** para cria√ß√£o de agentes inteligentes
    - **Streamlit** para interface web
    - **Pandas** para manipula√ß√£o de dados
    """)
    
    st.sidebar.markdown("### üîó Links √öteis")
    st.sidebar.markdown("""
    - [OpenAI Platform](https://platform.openai.com/)
    - [LangChain Documentation](https://python.langchain.com/)
    - [Streamlit Documentation](https://docs.streamlit.io/)
    """)

if __name__ == "__main__":
    main()